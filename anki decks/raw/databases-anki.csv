#separator:tab
#html:false
What is a database	An organised collection of data that allows for easy: adding, modification, deletion and searching.
Electronic Database benefits:	Easy to retrive add, delete and modify data. Easy to back up and make copies of data. Can be accessed by multiple people at the same time from different locations.
Entity	A catergory of object, person, event or thing of interest to an organisation about which data is to be recorded. e.g. Employee, Film, Actor, Product, Recipe, Ingredient. Each entity in a database system has attributes.
Flatfile database	Contains only a single table/file. Very simple and easy to set up. Requires little experience to maintain and is suitbale for storing small amounts of data.
Typical uses of flatfile databases	Storing contact details Small product databases Maintaining game / music collections
Drawbacks of using flatfile databases	Lots of repeated data - takes up storage Takes a long time to querey Difficult to maintain
Example of flatfile database	Surgery employ's multiple dentists, appointment system is required to allow patients to make appointments with particular dentists. Entities: Dentist, Patient and Appointment.  Attributes of Dentist may include, Title, Firstname, Surname, Qualification. Attributes of Patient may include Title, Firstname, Surename, Address, Telephone.
Relationship	The link between tables to infer logic.
Primary Key	A field in each record that is guaranteed to be uniquely identifiable. e.g. DentistID Underlined in entity descriptions.
Foreign Key	A field in a record that provides a relational link to another table. Where a primary key in one table and is placed in a 2nd table, providing a link between the two tables.
Index of primary keys	Databases automatically keep an index of primary keys so a specific Primary Key can be located easily and quickly. It provides a position of each record according to its primary making retrival of records quicker as items don't have to searched sequentially.
Secondary Key	A secondary index field kept and used for search criteria. Example. a doctor searches the patient's Surname as they are unlikely to know PatientID.
Different types of relationships	One to oneOne to manyMany to many
One to one	One studnet has one planner. One planner belongs to one student.
One to many	One tutor group has many students Many students belong to one tutor group  One mother has many children Many children have one mother
Many to many	One student can be taught by many teachers One teacher can have many students. Not good practice
Methods of handling data	Capturing - How do we get the data into the database in the first place Selecting - How do we then query the data and retrive it Managing - How do we manage, manipulate, add, edit and delete data Exchanging - how do wew exchange the data with other people / systems
Capturing Data - Paper based data capture forms	Data input via this method is largely manual.  Involves the human reading the form and typing the information into a computer system. Tactics used to make data capture form fast and error free: Clear labelsClear instructions in capitalsInstruction to complete in black penTick boxesSquares for entering each letter seperately. example: Market research forms.
Capturing Data - Optical Character Recognition	Speed and automate data input Techonology automatically reads text by interpretting the shape of letters. Works better with printed text example : Post Office using OCR software to read postcodes and route mail Road cameras for number plate recognition software.
Capturing Data - Optical Mark Recognition	Very fast and efficient way of collecting data and inputting it into a data base while significantly reducing possibility of human error. Used for multiple choice tests and lottery tickets.
Capturing data - other methods.	Magnetic ink - cheques scanned using magnetic ink character recognition. Bank number, customer account number, and cheque number are printed in special magnetic ink along the bottom of the cheque. Amount of the cheque has to be manually entered by the bank clerk.  Scanners - scanning information at an airport for passports, QR codes.
Selecting Data - SQL	Query language that allows for fast and efficient retrival, deletion and manipluation of data from databases using simple set of commands.
Selecting Data - Query By Example	Query Language that makes use of visual tables where use would enter commands and conditions. Once query is built using QBE, it is converted into statement that can be executed against the database. Doesn't require the user to remember finer SQL syntax.
Managing Data	Databases need to be able to be modified. Done through, adding, editing, and deleting data. This modification can be done through Database Manipulation Languages or inbuilt facilities of the Database Management System (DBMS).
Managing Data - DBMS	Provides layer of abstraction for the user and the programmer. Hides underlaying structure of data and ensures it remains integral by: Preventing the creation of duplicate primary keysEnforcing validation rulesProviding secure accessProviding encryptionProviding program data independanceManaging multiple user's access to data at the same time.
Exchanging Data	Data must be able to be exchanged between other systems or applications such as: Spreadsheet software Accounting programs
Exchanging data - considerations of format	The common formats used to exchange data XML and JSON are both human readable open formats for structuring data Both are common standards designed for storing and transporting dataAs long as one system exports the data in an acceptable format (JSON) another system can accept data and be sure of the format it will arrive in
Exchanging Data - Manual methods	CSV is a format of data exchange. Comma separated Values Each record is stored on a seperate line by line in the file and each field is separated by comma Import routines can be written to extract the data from a CSV file. Many systems allow data to be outputted in a CSV file.  Methods of actually exchanging the data could be manual:  Memory stick, email, optical media, removeable hard drives or paper based.
Exchanging data - Automatic methods	The transferrring of data between computer systems usually via the Internet without the need for human intervention. Having 2 databases interface with one another so they can read and write directly from eachother's tables.
EDI	Electronic Data Interchange A protocol between 2 systems to facilitate exchanging data. Using standardised message formatting, documents can be exchanged electronically. Transaction software processes the data and the software on the receiving end looks up details in it's database.
Uses of EDI	Exam Boards sending results to schools Insurance companies to check that an applicant has a driver's license.
Advantage of EDI	Significantly increases the speed of data transmission and effeciency of processes for users. Can be automated entirely without human involvment.
Disadvatage of EDI	Due to lack of human involvement, data errors can go unnoticed and will be replicated along multiple systems.
Relational Database	A collection of tables in which relationships are modelled by shared attributes.
Table descriptor	Book (BookID, DeweyCode, Title, Author, DatePublished)  Entity / Table name shown outside brackets Attributes listed inside the brackets Primary key underlined.
Normalisation	Concept of splitting tables in a database and arranging the data to move it from 1st to 2nd to 3rd normal form. The process used to optimise the design for a relational database.  Tables should be organised in a way: No data is unnecessarily duplicatedData is consistent throughout the database. Should be an automatic consequence of not holding any duplicated data, meaning anomolies won't arrise when data is modified.Structure of each table is flexible enough to allow you to enter any number of itemsStucture should enable user to make all kinds of complex queries relating data from different tables.
0NF / Flat file	Data is kept entirely in one table. Lots or repeating data.
Getting to 1NF	All field names should be unique -  Avoids confusion Values in fields should all be from the same domain - stored values should be of the same typeValues in fields should be atomic - 1 cell = 1 valueNo 2 records can be identical - This may increase data redundancy but each record is uniqueEach table needs a primary key
Composite primary key	When in a table there is no field that is guaranteed to be uniquely indentifiable so 2 seperate fields are combined to provide a key that is guaranteed to uniquely indentifiable for each record.
Getting to 2NF	Data should already be in 1NFRemoving partial key dependancies - so each table has it's own purpose.
What is a partial key dependacy?	Wherer a single field is dependant upon by other fields for returning data. So one or more other fields depend on only part of the primary key. Tends to arise during the use of composite primary keys.
Removing partial key dependancies	Split table at the composite key boundary This removes repeating data and partial dependancies but may produce a M:M relationship.
Trick for when to split into tables	If a field or a group of fields can be inferred from a field that isn't the primary key, they are candidates for splitting into a seperate table. e.g. I cannot infer further data from just the a name field, neither DoB or gender. But I can from course number, course number tells name, lecturer name and initials.
Fixing a many to many relationship:	Create a link table Assign primary keys from 2 initial tables as the composite primary key in the new linking table.  e.g.  Product (ProductID, ProductName, CostPrice, SellingPrice, CompQty, ComponentID) Component (CompID, CompName, SupplierID, SupplierDetails, ProductID)  Becomes   Product(ProductID, ProductName, CostPrice, SellingPrice) ProductComp(ProductID, CompID, CompQty) Component(CompID, CompName, SupplierID, SupplierName)
Getting to 3NF	Data should already be in 2NFAny Non key dependancies must be removed
Non key dependancy	Where the value of a field is determined by the value of another field that is not part of the primary key.
3NF Means that	All attributes are dependant on the key, the whole key and nothing but the key.
Non key dependacy examples	Lecturer initials can be determined by course number or course name Lecturer name is dependant on lecturer initials.
Fixing non key dependancies	Create another table to remove the non key dependancies. Product(ProductID, ProductName, CostPrice, SellingPrice) ProductComp(ProductID, CompID, CompQty) Component(CompID, CompName, SupplierID, SupplierName)  Becomes:   Product(ProductID, ProductName, CostPrice, SellingPrice) ProductComp(ProductID, CompID, CompQty) Component(CompID, CompName, SupplierID) Supplier (SupplierID, SupplierName)
Importance of Normalisation:	No data reduncancy Easier to maintain and modify databases  Faster sorting and searching Easier to delete records.
Structured Query Language	Allows for fast and efficient retrival, deletion and manipulation of data held in relational databases using a set of commands. Primarily a declaritive language - expresses what needs to be achieved as opposed to a procedural language that expresses the logic of how something needs to be achieved.
SQL commands	SELECT FROM WHERE LIKE AND OR DELETE INSERT DROP JOIN
SELECT .. FROM .. WHERE	The SELECT statement is used to extract a collection of fields from a given table.   SELECT List the fields to be displayed FROM List the table or tables the data will come from WHERE List the search criteria ORDER BY List the fields that the results are to be sorted on (default is ascending order)
SELECT *	Will display all the fields
Use of dates in SQL	"Dates are enclosed in """" or ## e.g. #01/01/2015#"
SQL Conditions	
Nested Selection example	"SELECT name FROM world WHERE population >             SELECT population             FROM world             WHERE name = ""Algeria""  This will output all the value of the name field from the world table where the population is greater than Algeria."
Inserting data	SQL INSERT INTO statement is used to insert a new record into a database table  INSERT INTO tableName (field1, field2, ...) VALUES (value1, value2, ...)
Deleting Data	DELETE FROM tableName WHERE fieldName condition
Updating data	UPDATE tableName SET field1 = value1, field2 = value2, ... WHERE fieldName = condition
Deleting a table	DROP TABLE tableName
SQL JOIN	"JOIN provides an alternative method of combining rows from 2 or more tables based on a common field between them.  SELECT Song.SongTitle, Artist.ArtistName, Song.MusicType FROM Song Join Artist ON Song.ArtistID = Artist.ArtistID WHERE Song.MusicType = ""Art Pop"""
Creating a table using SQL	CREATE TABLE Employee ( EmpID INTEGER NOT NULL, PRIMARY KEY, EmpName VARCHAR(20) NOT NULL, HireDate DATE, Salary CURRENCY )
SQL Datatypes	
Altering a table using SQL to add a field	ALTER TABLE Employee ADD Department VARCHAR(10)
Altering a table using SQL to delete a field	ALTER TABLE Employee DROP COLUMN HireDate
Altering a table using SQL to change the data type of a field	ALTER TABLE Employee MODIFY COLUMN EmpName VARCHAR(30) NOT NULL
Including a foreign key in a table using SQL	CREATE TABLE .... ( .... FOREIGN KEY key1 REFERENCES otherTable1(key1) FOREIGN KEY key2 REFERENCES otherTable2(key2) PRIMARY KEY (key1,key2) )  This creates a foreign composite primary key.
Data integrity	The process of maintaining the consistency of the database It is vital to guarantee integrity of data in a database.
Referential integrity	A technique to ensure data integrity in a relational database  Refers to the accuracy and consistency of data within a relationship. Ensuring an entry isn't deleted if it used in another table.
Maintaining referential integrity	Enforce a cascade delete restraint on the primary key relationship between tables.  Deleting a record in one table will result in the deletion of the corresponding record in the other table.  If cascading delete on a primary key that is a foreign key in another table, we could unintentionaly delete entire records.   Can also be used to prevent addition of records into a table of there isn't matching data for it to be linked to.
Transactions	Any information processing that is divided into individual operations. Can either be successful or a failure, never partially complete.
Relational database base functionality	Create = INSERT/CREATE Read = SELECT Update = UPDATE Delete = DELETE
ACID	Atomicity Cosistency Isolation Durability Ensures data integrity of transaction processing, all DMBS must follow ACID. These rules describe all of the properties required by all database transactions.
Atomicity	Changes to a database is either completely performed or not at all. Half changes must not be saved to a database. Guarantees in any situation, including power cuts or hard disk crashes, it is not possible to process only part of a transaction.
Consistency	Any changes in the database must retain the overall state of the database. Ensures no transaction can violate any of the defined validation rules for maintaining the integrity of the database. When a database is created, referential integrity rules will be specified between linking tables, thus it will not be possible to record a mark in a RESULTS table for a student who is not in the STUDENT table in the database.  It won't be possible to delete a record from the STUDENT table if htey have marks on the RESULTS table.
Isolation	Any transaction musn't be interrupted by another transaction. The transaction must occur in isolation so other users or processors can't access the data concerned. The DMBS enforces isolation by implemention of data locking The records affected by the transaction are locked effectively placing them in a read only state, only when the transaction is fully complete, the lock is removed.  Ensures that concurrent execution of transactions leads to the same results as if transactions were processed one after the other.
Durability	Once a change has been made to a database, it must not be lost due to a system failure. Achieved by the DBMS by writing the effects of the transaction immediately back to permanent secondary storage rather than holding these changes in temporary volatile storage.
Problems with multi user databases	Multiple users simultaneously updating a database table may cause updates to be lost unless:  When an item is updated, the entire record (the whole block in which the record is physically held) will be copied into the user's own local memory area at the workstation. When the record is saved, the block is rewritten to the file server. Situation:  User A accesses a customer record, causing it to be copied into User A memory, and starts to type in a new address for a customer. User B accesses the same customer record, and alters the credit limit ad then saves the record and calls up the next record that needs updating. User A completes the address change, and saves the record.
Record Locking	The technique of preventing simultaneously access to objects in a database in order to prevent updates being lost or inconsistencies in the data arising. In its simplest form, a record is locked whenever a user retrieves it for editing or updating. Anyone else attempting to retrieve the same record is denied access until the transaction is completed or cancelled. Outcome of concurrent transactions is the same as if transactions were completely sequentially. Allows one user to modify record level data at anyone time.
Problems with record locking	If 2 users are attempting to update 2 records, a situation can arise in which neither can proceed, known as deadlock. The DBMS must recognise when this situation has occurred and take action. Either serialisation, timestamp ordering or commited ordering may be used.
Serialisation	Technique that ensures that transactions do not overlap in time and therefore cannot interfere with each other or lead to updates being lost. A transaction cannot start until the previous on has finished. This can be implemented using timestamp ordering.
Timestamp ordering	A timestamp is given whenever a transaction starts. So if 2 transactions affect the same object (a record or a table), the transaction with the earlier timestamp should be applied first. To ensure transactions are not lost, every object in the database has a read timestamp and a write timestamp which are updated whenever an object in a database is read or writen. When a transaction starts, it reads the data from a record causing the read timestamp to be set. When it writes the updated data back to the record it will check the read timestamp. If this is not the same as the value that was saved when the transaction was started, it will know that another transaction is also taking place on the record. A range of problems can this be identified and avoided.
Commitment ordering	Serialisation technique to ensure that transactions are not lost when 2 or more users are simultaneously trying to access the same database object. Transacations are ordered in terms of their dependancies on each other as well as the time they were initiated.  It can be used to prevent deadlock by blocking one request until another is completed.
Redundancy	When identical systems are kept in case of primary systems going down to prevent transaction loss. Every transaction is written to 2 or 3 different storage facilities thay may be in different geographical locations. Protects against loss of data in the event of power failure or other disasters. If one system fails, the back up system autmatically takes over and processing can continue. Used by many organisations such as banks, airport systems, hospitals who cannot afford their computer systems to go down even for a few seconds with consequent loss of transaction data.
